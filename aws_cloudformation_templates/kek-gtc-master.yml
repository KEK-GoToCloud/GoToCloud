AWSTemplateFormatVersion: '2010-09-09'
Description: kek-gtc-master
Parameters:
  VpcCidrBlock:
    Type: String
    Description: VPC Cidr Block
    Default: 10.0.0.0/16
  Subnet1CidrBlock:
    Type: String
    Description: Subnet 1 Cidr Block
    Default: 10.0.0.0/20
  Subnet2CidrBlock:
    Type: String
    Description: Subnet 2 Cidr Block
    Default: 10.0.16.0/20
  Subnet3CidrBlock:
    Type: String
    Description: Subnet 3 Cidr Block
    Default: 10.0.32.0/20
  AvailabilityZone1:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: ap-northeast-1c
    Description: The Availability Zone
  AvailabilityZone2:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: ap-northeast-1d
    Description: The Availability Zone
  AvailabilityZone3:
    Type: 'AWS::EC2::AvailabilityZone::Name'
    Default: ap-northeast-1a
    Description: The Availability Zone

#################################
# VPC / Subnet
# Create VPC
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"
# Create Subnet
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      AvailabilityZone: 
        Ref: AvailabilityZone1
      CidrBlock:
        Ref: Subnet1CidrBlock
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet1"
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      AvailabilityZone: 
        Ref: AvailabilityZone2
      CidrBlock:
        Ref: Subnet2CidrBlock
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet2"
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      AvailabilityZone: 
        Ref: AvailabilityZone3
      CidrBlock:
        Ref: Subnet3CidrBlock
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-subnet3"
# Create/Attach RouteTable ForVPC
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-rtb"
  Subnet1cAssociationRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: Subnet1
      RouteTableId:
        Ref: RouteTable
  Subnet2dAssociationRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: RouteTable
  Subnet4aAssociationRouteTable:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: Subnet3
      RouteTableId:
        Ref: RouteTable
####################################
# Create S3 Bucket
#
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "Private"
      BucketName: !Sub "${AWS::StackName}-s3-bucket"
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-s3-bucket"
####################################
# Create EFS
#
  FileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: false
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticfilesystem:ClientMount"
            Principal:
                AWS: "*"
            Condition:
              Bool:
                "elasticfilesystem:AccessedViaMountTarget": "true"
      FileSystemTags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-efs"
  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: 
        Ref: FileSystemResource
      SubnetId: 
        Ref: Subnet1
      SecurityGroups:
      - Ref: EfsSecurityGroup
  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: 
        Ref: FileSystemResource
      SubnetId: 
        Ref: Subnet2
      SecurityGroups:
      - Ref: EfsSecurityGroup
  MountTargetResource3:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: 
        Ref: FileSystemResource
      SubnetId: 
        Ref: Subnet3
      SecurityGroups:
      - Ref: EfsSecurityGroup
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-efs-sg"
      GroupDescription: !Sub "${AWS::StackName}-efs-sg"
      VpcId:
        Ref: Vpc
      SecurityGroupIngress:
        -
          IpProtocol: "-1"
          FromPort: '2049'
          ToPort: '2049'
          CidrIp: "10.0.0.0/8"
  DataSyncLocationEfs:
    Type: AWS::DataSync::LocationEFS
    DependsOn: MountTargetResource1
    Properties:
      Ec2Config:
        SecurityGroupArns:
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/${EfsSecurityGroup}'
        SubnetArn: !Sub 
          - 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/${Subnet1}'
          - SubnetId: ${Subnet1}
      EfsFilesystemArn: !GetAtt FileSystemResource.Arn
      FileSystemAccessRoleArn: !GetAtt DataSyncRole.Arn
      InTransitEncryption: TLS1_2
  DataSyncRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: DataSyncEFSFullAccessRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: datasync.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess
  EFSWriteAccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EFSWriteAccessRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: EFSWriteAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  -  "elasticfilesystem:ClientMount"
                  -  "elasticfilesystem:ClientWrite"
                  -  "elasticfilesystem:ClientRootAccess"
                Resource: !GetAtt FileSystemResource.Arn
  EFSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EFSWriteAccessRole
      Path: /
      Roles:
        - !Ref EFSWriteAccessRole

Outputs:
  VpcId:
    Description: VpcId
    Value: !Ref Vpc
    Export:
      Name: !Sub "${AWS::StackName}-vpc"
  Subnet1Id:
    Description: Subnet1Id
    Value: !Ref Subnet1
    Export:
      Name: !Sub "${AWS::StackName}-subnet1"
  Subnet2Id:
    Description: Subnet2Id
    Value: !Ref Subnet2
    Export:
      Name: !Sub "${AWS::StackName}-subnet2"
  Subnet3Id:
    Description: Subnet3Id
    Value: !Ref Subnet3
    Export:
      Name: !Sub "${AWS::StackName}-subnet3"
  RouteTable:
    Description: RouteTableId
    Value: !Ref RouteTable
    Export:
      Name: !Sub "${AWS::StackName}-rtb"
  EFS:
    Description: EFS
    Value: !Ref FileSystemResource
    Export:
      Name: !Sub "${AWS::StackName}-efs"
  DataSyncLocationEFS:
    Description: EFS Location for DataSync
    Value: !Ref DataSyncLocationEfs
    Export:
      Name: !Sub "${AWS::StackName}-efs-loc"
  DataSyncRole:
    Description: Role for Data Sync
    Value: !GetAtt DataSyncRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-datasync-role"
